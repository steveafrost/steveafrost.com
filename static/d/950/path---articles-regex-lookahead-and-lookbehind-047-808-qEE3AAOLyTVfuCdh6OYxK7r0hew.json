{"data":{"site":{"siteMetadata":{"title":"Steve Frost – Front-End Engineer","author":"Steve Frost"}},"markdownRemark":{"id":"458ae405-8e8b-5f4c-b83a-132b80b92fac","html":"<p><img src=\"/img/blogs/regexlookarounds1.jpg\" alt=\"regex-lookarounds-picture\"></p>\n<p>Regular Expressions, or regex, is a powerful tool available across several languages to help match patterns. As one <a href=\"http://blog.teamtreehouse.com/regular-expressions-10-languages\">memorable contrast</a> explains, regex is to programming as ‘okay’ is to spoken language – it’s recognized everywhere! It is this universal usability as well as the the common task of having to compare data against a point or pattern that makes regex so prevalent in the development community.</p>\n<p>Since it is used so often, there is plenty of documentation on it though that doesn’t stop the groans from circulating through the room each time regex is mentioned. Personally, I groan because regex teases the head around a problem in a way like no other tool. Also, each time I use it, I have to refresh on exactly how the syntax works since it is unique to regex. For a syntax refresher, I usually pop over to <a href=\"http://regexr.com\">RegExr</a> where they have a cheat sheet and an environment where example data can be manipulated and tested against with custom regex statements.</p>\n<p>Inevitably, after brushing up with the cheat-sheet, I found a novel regex approach that I’ve never seen before. Most recently, I was working with <a href=\"http://www.fun-with-words.com/pang_example.html\">pangrams</a>, sentences that use each letter of the alphabet once, and came across regex’s lookaround behaviors which fit the bill perfectly, as regex usually does. Let’s take a look at what the syntax looks like for these behaviors.</p>\n<h3>Lookarounds</h3>\n<pre><code class=\"language-javascript\"># Lookaheads examine what immediately follows the current position\nPositive Lookahead: (?=abc)\nNegative Lookahead: (?!abc)\n\n# Lookbehinds examine what immediately precedes the current position\nPositive Lookbehind: (?&#x3C;=abc)\nNegative Lookbehind: (?&#x3C;!abc)\n</code></pre>\n<h3>In Practice</h3>\n<p>The lookarounds in the above example would help us locate text immediately following or preceding (depending on which we use) a designated string we provide. Let’s use a lookahead to return true if hello if it appears before world but false if followed by any other word.</p>\n<pre><code class=\"language-javascript\">string1 = 'hello world'\nstring2 = 'hello steve'\n\n/(hello)(?=\\sworld)/.test(string1) #=> true\n/(hello)(?=\\sworld)/.test(string2) #=> false\n</code></pre>\n<p>Our regex here, <code>/(hello)(?=\\sworld)/</code> is explicitly testing each string to see if there is the word, ‘hello’ immediately followed (<code>?=</code> - positive lookahead) by a space (<code>\\s</code>) then the word world. As cool as it is, let’s take this newly acquired knowledge for a spin on a real-world example.</p>\n<h3>Real-World Example</h3>\n<p>Time for a more realistic example – password validation! It is typical to see requirements for a password so how can we check against those? Our fancy new regex lookaheads should help.</p>\n<ul>\n<li>Must contain 8 letters</li>\n<li>Password ends in number</li>\n<li>No special characters allowed</li>\n</ul>\n<pre><code class=\"language-javascript\">function isValidPassword(password) {\n  let hasEightLettersThenNum = /\\w{8}(?=[1-9])/\n  let hasSpecialChars = /[^\\w]/g  #=> g for global search\n\n  if (hasEightLettersThenNum.test(password) === true) &#x26;&#x26;\n    (hasSpecialChars.test(password) === false) {\n    console.log(\"Valid Password\")\n  } else {\n    console.log(\"Invalid Password, please see requirements above\")\n  }\n}\n</code></pre>\n<p>As you can see, we were able to use the positive lookahead <code>(?=[1-9])</code> to determine that our password had eight letters followed by a number. This is a fairly contrived example and there are easy ways to check for trailing digits without using a lookahead though this is the general idea &#x26; an applicable use.</p>\n<h3>Conclusion</h3>\n<p>Expanding on &#x26; exercising regex knowledge leads to greater appreciation. Personally, I’ve become more comfortable/daring after a few real-world implementations and I’ve started to recognize that the uses are substantial, varied, and powerful. If you have any go-to uses for regex lookaround, leave them in the comments!</p>","frontmatter":{"title":"Applying Regex Lookarounds","date":"May 06, 2017"}}},"pageContext":{"slug":"/articles/regex-lookahead-and-lookbehind/"}}